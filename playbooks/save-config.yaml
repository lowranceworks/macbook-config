---
- name: Save Configuration
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    project_path: /Users/josh/Projects/macbook_config
    commit_message: "fix: update configuration files"
    pr_title: "update configuration files"
    pr_body: "These changes were applied by the save-configuration.yaml playbook."
    branch_name: "update-configuration"

  tasks:
    - name: Git | Check for local changes
      command:
        cmd: git status --porcelain
        chdir: "{{ project_path }}"
      register: git_status
      changed_when: false

    - name: Git | Pull configuration from remote repository
      git:
        repo: 'https://github.com/lowranceworks/macbook_config.git'
        dest: "{{ project_path }}"
        update: yes
      when: git_status.stdout == ""
    
    - name: Brew | Gather currently installed packages
      shell: brew list --formula --full-name
      register: current_brew_packages
      changed_when: false  # to ensure this task is always reported as unchanged
      args:
        executable: /bin/sh

    - name: Brew | Check if installed packages match brew.txt
      stat:
        path: "{{ project_path }}/files/brew.txt"
      register: brew_file_stat
      changed_when: false

    - name: Brew | Update brew.txt if there are differences
      copy:
        content: "{{ current_brew_packages.stdout }}"
        dest: "{{ project_path }}/files/brew.txt"
      when:
        - brew_file_stat.stat.exists
        - current_brew_packages.stdout != lookup('file', '{{ project_path }}/files/brew.txt')

    - name: Brew | Gather currently installed GUI applications via cask
      shell: brew list --casks --full-name
      register: current_brew_casks
      changed_when: false
      args:
        executable: /bin/sh

    - name: Brew | Check if installed GUI applications match brew-casks.txt
      stat:
        path: "{{ project_path }}/files/brew-casks.txt"
      register: brew_casks_file_stat
      changed_when: false

    - name: Brew | Update brew-casks.txt if there are differences
      copy:
        content: "{{ current_brew_casks.stdout }}"
        dest: "{{ project_path }}/files/brew-casks.txt"
      when:
        - brew_casks_file_stat.stat.exists
        - current_brew_casks.stdout != lookup('file', '{{ project_path }}/files/brew-casks.txt')
              
    - name: Brew | Remove software from brew-casks.txt that I do not want saved
      tags: brew
      ansible.builtin.lineinfile:
        path: "{{ project_path + '/files/brew-casks.txt' }}"
        regexp: '^.*{{ item }}.*$'
        state: absent
      loop:
        - expressvpn
        - yubico-yubikey-manager
        - signal
        - teamviewer
        - tailscale
        - telegram
        - betterdisplay
        - steam

    - name: Visual Studio Code | Save user settings
      copy:
        src: "{{ lookup('env', 'HOME') }}/Library/Application Support/Code/User/settings.json"
        dest: "{{ project_path }}/files/home_directory/Library/Application Support/Code/User/settings.json"

    - name: Inkdrop | Save Inkdrop initialization configuration
      copy:
        src: "{{ lookup('env', 'HOME') }}/Library/Application Support/inkdrop/init.js"
        dest: "{{ project_path }}/files/home_directory/Library/Application Support/inkdrop/init.js"

    - name: MacOS | Save native keybindings
      copy:
        src: "{{ lookup('env', 'HOME') }}/Library/Preferences/com.apple.symbolichotkeys.plist"
        dest: "{{ project_path }}/files/home_directory/Library/Preferences/com.apple.symbolichotkeys.plist"

    - name: Visual Studio Code | Save keybindings 
      copy:
        src: "{{ lookup('env', 'HOME') }}/Library/Application Support/Code/User/keybindings.json"
        dest: "{{ project_path }}/files/home_directory/Library/Application Support/Code/User/keybindings.json"

    - name: Inkdrop | Save keybindings
      copy:
        src: "{{ lookup('env', 'HOME') }}/Library/Application Support/inkdrop/keymap.cson"
        dest: "{{ project_path }}/files/home_directory/Library/Application Support/inkdrop/keymap.cson"

    - name: Inkdrop | Save packages
      archive:
        path: "{{ lookup('env', 'HOME') }}/Library/Application Support/inkdrop/packages/"
        dest: "{{ project_path }}/files/home_directory/Library/Application Support/inkdrop/packages.zip"
        format: zip

    - name: Alfred | Ensure temporary directory exists
      tags: alfred
      file:
        path: "{{ playbook_dir }}/tmp/Alfred.alfredpreferences/"
        state: directory
        mode: '0755'

    - name: Alfred | Rsync preferences excluding remote directory to temp location
      tags: alfred
      command:
        cmd: "rsync -av --exclude 'remote/' '{{ lookup('env', 'HOME') }}/Library/Application Support/Alfred/Alfred.alfredpreferences/' '{{ playbook_dir }}/tmp/Alfred.alfredpreferences/'"
        
    - name: Alfred | Archive the preferences from temp location
      tags: alfred
      archive:
        path: "{{ playbook_dir }}/tmp/Alfred.alfredpreferences/"
        dest: "{{ project_path }}/files/home_directory/Library/Application Support/Alfred/Alfred.alfredpreferences.zip"
        format: zip

    - name: Alfred | Clean up temporary directory
      tags: alfred
      file:
        path: "{{ playbook_dir }}/tmp/Alfred.alfredpreferences/"
        state: absent

    - name: Git | Add all changes
      command:
        cmd: git add --all
        chdir: '{{ project_path }}'

    - name: Git | Execute status command
      command:
        cmd: git status
        chdir: '{{ project_path }}'
      register: git_status_result

    - name: Git | Commit changes
      command:
        cmd: git commit -m '{{ commit_message }}'
        chdir: '{{ project_path }}'
      when: "'Your branch is up to date with' not in git_status_result.stdout"

    - name: Git | Push changes
      command:
        cmd: git push --set-upstream origin main
        chdir: '{{ project_path }}'
      when: "'Your branch is up to date with' not in git_status_result.stdout"

    - name: MacOS | Save general keyboard preferences
      tags: os
      fetch:
        src: "~/Library/Preferences/com.apple.HIToolbox.plist"
        dest: "{{ project_path }}/files/home_directory/Library/Preferences/com.apple.HIToolbox.plist"
        flat: yes
            
    - name: MacOS | Check if DefaultKeyBinding.dict exists
      tags: os
      stat:
        path: "~/Library/KeyBindings/DefaultKeyBinding.dict"
      register: keybinding_file

    - name: MacOS | Save keybindings
      tags: os
      fetch:
        src: "~/Library/KeyBindings/DefaultKeyBinding.dict"
        dest: "{{ project_path }}/files/home_directory/Library/KeyBindings/DefaultKeyBinding.dict"
        flat: yes
      when: keybinding_file.stat.exists

    - name: Zsh | Fetch aliases.zsh from ~/.oh-my-zsh/
      tags: zsh
      fetch:
        src: "~/.oh-my-zsh/aliases.zsh"
        dest: "{{ project_path }}/files/home_directory/.oh-my-zsh/aliases.zsh"
        flat: yes

    - name: Zsh | Fetch oh-my-zsh.sh from ~/.oh-my-zsh/
      tags: zsh
      fetch:
        src: "~/.oh-my-zsh/oh-my-zsh.sh"
        dest: "{{ project_path }}/files/home_directory/.oh-my-zsh/oh-my-zsh.sh"
        flat: yes

    - name: LunarVimVim | Fetch all files from ~/.config/lvim/ recursively
      tags: lunarvim
      synchronize:
        src: "~/.config/nvim/"
        dest: "{{ project_path }}/files/home_directory/.config/nvim/"
        recursive: yes
        mode: pull

    - name: NeoVim | Fetch all files from ~/.config/nvim/ recursively
      tags: neovim
      synchronize:
        src: "~/.config/nvim/"
        dest: "{{ project_path }}/files/home_directory/.config/nvim/"
        recursive: yes
        mode: pull


