---
- name: Save Configuration
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    project_path: /Users/josh/Projects/macbook_config
    commit_message: "fix: update configuration files"
    pr_title: "update configuration files"
    pr_body: "These changes were applied by the save-configuration.yaml playbook."
    branch_name: "update-configuration"

  tasks:
  - name: Git | Check for local changes
    command:
      cmd: git status --porcelain
      chdir: "{{ project_path }}"
    register: git_status
    changed_when: false

  - name: Git | Pull configuration from remote repository
    git:
      repo: 'https://github.com/lowranceworks/macbook_config.git'
      dest: "{{ project_path }}"
      update: yes
    when: git_status.stdout == ""
  
  - name: Brew | Gather currently installed packages
    shell: brew list --formula --full-name
    register: current_brew_packages
    changed_when: false  # to ensure this task is always reported as unchanged
    args:
      executable: /bin/sh

  - name: Brew | Check if installed packages match brew.txt
    stat:
      path: "{{ project_path }}/files/brew.txt"
    register: brew_file_stat
    changed_when: false

  - name: Brew | Update brew.txt if there are differences
    copy:
      content: "{{ current_brew_packages.stdout }}"
      dest: "{{ project_path }}/files/brew.txt"
    when:
      - brew_file_stat.stat.exists
      - current_brew_packages.stdout != lookup('file', '{{ project_path }}/files/brew.txt')

  - name: Brew | Gather currently installed GUI applications via cask
    shell: brew list --casks --full-name
    register: current_brew_casks
    changed_when: false
    args:
      executable: /bin/sh

  - name: Brew | Check if installed GUI applications match brew-casks.txt
    stat:
      path: "{{ project_path }}/files/brew-casks.txt"
    register: brew_casks_file_stat
    changed_when: false

  - name: Brew | Update brew-casks.txt if there are differences
    copy:
      content: "{{ current_brew_casks.stdout }}"
      dest: "{{ project_path }}/files/brew-casks.txt"
    when:
      - brew_casks_file_stat.stat.exists
      - current_brew_casks.stdout != lookup('file', '{{ project_path }}/files/brew-casks.txt')
            
  - name: Brew | Remove software from brew-casks.txt that I do not want saved
    tags: brew
    ansible.builtin.lineinfile:
      path: "{{ project_path + '/files/brew-casks.txt' }}"
      regexp: '^.*{{ item }}.*$'
      state: absent
    loop:
      - expressvpn
      - yubico-yubikey-manager
      - signal
      - teamviewer
      - tailscale
      - telegram
      - betterdisplay
      - steam

  - name: Visual Studio Code | Save user settings
    copy:
      src: "{{ lookup('env', 'HOME') }}/Library/Application Support/Code/User/settings.json"
      dest: "{{ project_path }}/files/Home/Library/Application Support/Code/User/settings.json"

  - name: Inkdrop | Save Inkdrop initialization configuration
    copy:
      src: "{{ lookup('env', 'HOME') }}/Library/Application Support/inkdrop/init.js"
      dest: "{{ project_path }}/files/Home/Library/Application Support/inkdrop/init.js"

  - name: MacOS | Save native keybindings
    copy:
      src: "{{ lookup('env', 'HOME') }}/Library/Preferences/com.apple.symbolichotkeys.plist"
      dest: "{{ project_path }}/files/Home/Library/Preferences/com.apple.symbolichotkeys.plist"

  - name: Visual Studio Code | Save keybindings 
    copy:
      src: "{{ lookup('env', 'HOME') }}/Library/Application Support/Code/User/keybindings.json"
      dest: "{{ project_path }}/files/Home/Library/Application Support/Code/User/keybindings.json"

  - name: Inkdrop | Save keybindings
    copy:
      src: "{{ lookup('env', 'HOME') }}/Library/Application Support/inkdrop/keymap.cson"
      dest: "{{ project_path }}/files/Home/Library/Application Support/inkdrop/keymap.cson"

  - name: Inkdrop | Save packages
    archive:
      path: "{{ lookup('env', 'HOME') }}/Library/Application Support/inkdrop/packages/"
      dest: "{{ project_path }}/files/Home/Library/Application Support/inkdrop/packages.zip"
      format: zip

  - name: Check if Alfred.alfredpreferences directory exists
    tags: alfred
    ansible.builtin.stat:
      path: "~/.alfred-preferences/Alfred.alfredpreferences/"
    register: alfred_prefs

  - name: Alfred | Archive preferences and other directories
    tags: alfred
    archive:
      path: "~/.alfred-preferences/Alfred.alfredpreferences/"
      dest: "{{ project_path }}/files/Home/.alfred-preferences/Alfred.alfredpreferences.zip"
      format: zip

  - name: Alfred | 
    tags: alfred
    file:
      path: "{{ playbook_dir }}/tmp/Alfred.alfredpreferences/"
      state: absent

  - name: Git | Add all changes
    command:
      cmd: git add --all
      chdir: '{{ project_path }}'

  - name: Git | Execute status command
    command:
      cmd: git status
      chdir: '{{ project_path }}'
    register: git_status_result

  - name: Git | Commit changes
    command:
      cmd: git commit -m '{{ commit_message }}'
      chdir: '{{ project_path }}'
    when: "'Your branch is up to date with' not in git_status_result.stdout"

  - name: Git | Push changes
    command:
      cmd: git push --set-upstream origin main
      chdir: '{{ project_path }}'
    when: "'Your branch is up to date with' not in git_status_result.stdout"

  - name: MacOS | Save general keyboard preferences
    tags: os
    fetch:
      src: "~/Library/Preferences/com.apple.HIToolbox.plist"
      dest: "{{ project_path }}/files/Home/Library/Preferences/com.apple.HIToolbox.plist"
      flat: yes
          
  - name: MacOS | Check if DefaultKeyBinding.dict exists
    tags: os
    stat:
      path: "~/Library/KeyBindings/DefaultKeyBinding.dict"
    register: keybinding_file

  - name: MacOS | Save keybindings
    tags: os
    fetch:
      src: "~/Library/KeyBindings/DefaultKeyBinding.dict"
      dest: "{{ project_path }}/files/Home/Library/KeyBindings/DefaultKeyBinding.dict"
      flat: yes
    when: keybinding_file.stat.exists

  - name: Zsh | Fetch aliases.zsh from ~/.oh-my-zsh/
    tags: zsh
    fetch:
      src: "~/.oh-my-zsh/aliases.zsh"
      dest: "{{ project_path }}/files/Home/.oh-my-zsh/aliases.zsh"
      flat: yes

  - name: Zsh | Fetch oh-my-zsh.sh from ~/.oh-my-zsh/
    tags: zsh
    fetch:
      src: "~/.oh-my-zsh/oh-my-zsh.sh"
      dest: "{{ project_path }}/files/Home/.oh-my-zsh/oh-my-zsh.sh"
      flat: yes

  - name: LunarVimVim | Fetch all files from ~/.config/lvim/ recursively
    tags: lunarvim
    synchronize:
      src: "~/.config/nvim/"
      dest: "{{ project_path }}/files/Home/.config/nvim/"
      recursive: yes
      mode: pull

  - name: NeoVim | Fetch all files from ~/.config/nvim/ recursively
    tags: neovim
    synchronize:
      src: "~/.config/nvim/"
      dest: "{{ project_path }}/files/Home/.config/nvim/"
      recursive: yes
      mode: pull

  - name: SSH | Fetch ~/.ssh/config
    tags: ssh
    fetch:
      src: "~/.ssh/config"
      dest: "{{ project_path }}/files/Home/.ssh/config"
      flat: yes

  - name: Zsh | Fetch ~/.p10k.zsh
    tags: zsh
    fetch:
      src: "~/.p10k.zsh"
      dest: "{{ project_path }}/files/Home/.p10k.zsh"
      flat: yes

  - name: Vim | Fetch ~/.vimrc
    tags: vim
    fetch:
      src: "~/.vimrc"
      dest: "{{ project_path }}/files/Home/.vimrc"
      flat: yes

  - name: Zsh | Fetch ~/.zshenv
    tags: zsh
    fetch:
      src: "~/.zshenv"
      dest: "{{ project_path }}/files/Home/.zshenv"
      flat: yes

  - name: Zsh | Fetch ~/.zshrc
    tags: zsh
    fetch:
      src: "~/.zshrc"
      dest: "{{ project_path }}/files/Home/.zshrc"
      flat: yes

  - name: Backup iTerm2 user configuration
    tags: iterm
    ansible.builtin.copy:
      src: "~/Library/Preferences/com.googlecode.iterm2.plist"
      dest: "{{ project_path }}/files/Home/Library/Preferences/com.googlecode.iterm2.plist"
      remote_src: yes
      mode: '0644'

  - name: Backup Terminal user configuration
    tags: iterminal
    ansible.builtin.copy:
      src: "~/Library/Preferences/com.apple.Terminal.plist"
      dest: "{{ project_path }}/files/Home/Library/Preferences/com.apple.Terminal.plist"
      remote_src: yes
      mode: '0644'

  - name: Backup extensions.json
    tags: vscode
    ansible.builtin.copy:
      src: "~/.vscode/extensions/extensions.json"
      dest: "{{ project_path }}/files/Home/.vscode/extensions/extensions.json"
      remote_src: yes
      mode: '0644'

  - name: Gather list of extension directories
    tags: vscode
    find:
      paths: "~/.vscode/extensions/"
      file_type: directory
    register: vscode_extensions

  - name: Backup individual Visual Studio Code extensions
    tags: vscode
    archive:
      path: "{{ item.path }}"
      dest: "{{ project_path }}/files/Home/.vscode/extensions/{{ item.path | basename }}.zip"
      format: zip
    loop: "{{ vscode_extensions.files }}"




  # - name: Add changes from the files directory
  #   command:
  #     cmd: git add files/*
  #     chdir: '{{ project_path }}'
      
  # - name: Commit the changes
  #   command:
  #     cmd: "git commit -m 'fix: update configuration files'"
  #     chdir: '{{ project_path }}'

  # - name: Push changes to the main branch
  #   command:
  #     cmd: git push origin main
  #     chdir: '{{ project_path }}'